/* automatically generated by rust-bindgen */

pub type wchar_t = libc::c_int;

#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}

impl Clone for div_t {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self {
        *self
    }
}
#[no_mangle]
pub extern "C" fn a64l(s: *const char)
#[no_mangle]
pub extern "C" fn abort() {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn abs(i: libc::c_int) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn atexit(func: ::std::option::Option<unsafe extern "C" fn()>) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn atof(str_: *const libc::c_char) -> f64 {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn atoi(str_: *const libc::c_char) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn atol(str_: *const libc::c_char) -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn bsearch(
    key: *const libc::c_void,
    base: *const libc::c_void,
    nel: usize,
    width: usize,
    compar: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const libc::c_void,
                             arg2: *const libc::c_void)
                             -> libc::c_int,
    >,
) -> *mut libc::c_void {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn calloc(nelem: usize, elsize: usize) -> *mut libc::c_void {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn div(numer: libc::c_int, denom: libc::c_int) -> div_t {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn drand48() -> f64 {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn ecvt(
    value: f64,
    ndigit: libc::c_int,
    decept: *mut libc::c_int,
    sign: *mut libc::c_int,
) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn erand48(xsubi: *mut libc::c_ushort) -> f64 {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn exit(status: libc::c_int) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn fcvt(
    value: f64,
    ndigit: libc::c_int,
    decept: *mut libc::c_int,
    sign: *mut libc::c_int,
) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn free(ptr: *mut libc::c_void) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn gcvt(value: f64, ndigit: libc::c_int, buf: *mut libc::c_char) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn getenv(name: *const libc::c_char) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn getsubopt(
    optionp: *mut *mut libc::c_char,
    tokens: *const *const libc::c_char,
    valuep: *mut *mut libc::c_char,
) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn grantpt(fildes: libc::c_int) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn initstate(
    seed: libc::c_uint,
    state: *mut libc::c_char,
    size: usize,
) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn jrand48(xsubi: *mut libc::c_ushort) -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn l64a(value: libc::c_long) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn labs(i: libc::c_long) -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn lcong48(param: *mut libc::c_ushort) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn ldiv(numer: libc::c_long, denom: libc::c_long) -> ldiv_t {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn lrand48() -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn malloc(size: usize) -> *mut libc::c_void {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn mblen(s: *const libc::c_char, n: usize) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn mbstowcs(pwcs: *mut wchar_t, s: *const libc::c_char, n: usize) -> usize {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn mbtowc(
    pwc: *mut wchar_t,
    s: *const libc::c_char,
    n: usize,
) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn mktemp(template: *mut libc::c_char) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn mkstemp(template: *mut libc::c_char) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn mrand48() -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn nrand48(xsubi: *mut libc::c_ushort) -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn ptsname(fildes: libc::c_int) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn putenv(string: *mut libc::c_char) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn qsort(
    base: *mut libc::c_void,
    nel: usize,
    width: usize,
    compar: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const libc::c_void,
                             arg2: *const libc::c_void)
                             -> libc::c_int,
    >,
) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn rand() -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn rand_r(seed: *mut libc::c_uint) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn random() -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn realloc(ptr: *mut libc::c_void, size: usize) -> *mut libc::c_void {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn realpath(
    file_name: *const libc::c_char,
    resolved_name: *mut libc::c_char,
) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn seed48(seed16v: *mut libc::c_ushort) -> libc::c_ushort {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn setkey(key: *const libc::c_char) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn setstate(state: *const libc::c_char) -> *mut libc::c_char {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn srand(seed: libc::c_uint) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn srand48(seedval: libc::c_long) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn srandom(seed: libc::c_uint) {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn strtod(str_: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f64 {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn strtol(
    str_: *const libc::c_char,
    endptr: *mut *mut libc::c_char,
    base: libc::c_int,
) -> libc::c_long {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn strtoul(
    str_: *const libc::c_char,
    endptr: *mut *mut libc::c_char,
    base: libc::c_int,
) -> libc::c_ulong {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn system(command: *const libc::c_char) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn ttyslot() -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn unlockpt(fildes: libc::c_int) -> libc::c_int {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn valloc(size: usize) -> *mut libc::c_void {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn wcstombs(s: *mut libc::c_char, pwcs: *const wchar_t, n: usize) -> usize {
    unimplemented!();
}

#[no_mangle]
pub extern "C" fn wctomb(s: *mut libc::c_char, wchar: wchar_t) -> libc::c_int {
    unimplemented!();
}
